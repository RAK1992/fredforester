<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:webflow="http://www.springframework.org/schema/webflow-config"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/webflow-config
       http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.0.xsd
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">
                    dataAccessFailure
                </prop>
            </props>
        </property>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="2097152"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="ApplicationResources"/>
        <property name="useCodeAsDefaultMessage" value="true"/>
    </bean> 

    <context:component-scan base-package="com.mycompany.webapp"/>

    <!-- Configures the @Controller programming model -->
    <mvc:annotation-driven/>
    
	<mvc:default-servlet-handler />
	
	<!-- Allow webflow to work with url rewriting -->
	<bean id="prettyHandler" class="com.mycompany.webapp.controller.PrettyFlowUrlHandler"/>
	
	<!-- Maps request paths to flows in the flowRegistry; e.g. a path of /hotels/booking looks for a flow with id "hotels/booking". -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="order" value="-1"/>
		<property name="flowRegistry" ref="flowRegistry" />
		<property name="flowUrlHandler" ref="prettyHandler"/>
	</bean>

    
    <!-- Convenient way to map URLs to JSPs w/o having a Controller -->
    <mvc:view-controller path="/admin/activeUsers" view-name="admin/activeUsers"/>
    <mvc:view-controller path="/mainMenu" view-name="mainMenu"/>

    <!-- View Resolver for regular JSPs -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="requestContextAttribute" value="rc"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- Add additional controller beans here -->
    
    <!-- Configures the Tiles layout system for the web flows -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/**/views.xml</value>
			</list>
		</property>
	</bean>
	
    <!-- Resolves logical view names returned by Controllers to Tiles; a view name to resolve is treated as the name of a tiles definition -->
	<bean id="tilesViewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.js.ajax.tiles2.AjaxTilesView"/>
	</bean>
	
	
	
	<!-- Dispatches requests mapped to flows to FlowHandler implementations -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor"/>
		<property name="flowUrlHandler" ref="prettyHandler"/>
	</bean>
	
	<!-- make sure all customer requests are handled by our custom flow handler -->
	<bean name="customer/*" class="com.mycompany.webapp.controller.CustomerFlowHandler" />
	
	<!-- Executes flows: the entry point into the Spring Web Flow system -->
	<webflow:flow-executor id="flowExecutor">
		<webflow:flow-execution-listeners>
			<webflow:listener ref="securityFlowExecutionListener" />
		</webflow:flow-execution-listeners>
	</webflow:flow-executor>
	
	<!-- The registry of executable flow definitions -->
	<webflow:flow-registry id="flowRegistry" flow-builder-services="flowBuilderServices" base-path="/WEB-INF/pages">
		<webflow:flow-location-pattern value="/**/*-flow.xml" />
	</webflow:flow-registry>

	<!-- Plugs in a custom creator for Web Flow views -->
	<webflow:flow-builder-services id="flowBuilderServices" view-factory-creator="mvcViewFactoryCreator" development="true"/>

	<!-- Configures Web Flow to use Tiles to create views for rendering; Tiles allows for applying consistent layouts to your views -->
	<bean id="mvcViewFactoryCreator" class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator"> 
		<property name="viewResolvers" ref="tilesViewResolver"/>
		<property name="useSpringBeanBinding" value="true" />
	</bean>
	
	<!-- Installs a listener to apply Spring Security authorities -->
	<bean id="securityFlowExecutionListener" class="org.springframework.webflow.security.SecurityFlowExecutionListener" />

	<!-- Bootstraps JSR-303 validation and exposes it through Spring's Validator interface -->
	<!--  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/> -->
	
	
</beans>
